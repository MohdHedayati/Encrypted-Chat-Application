{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Secure Chat App Documentation","text":"<p>Welcome to the documentation for the Secure Chat App, this is a comprehensive guide covering the project's architecture, security features, and implementation details.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ol> <li>Project Overview</li> <li>WebSockets</li> <li>Cryptography Algorithms<ul> <li>RSA</li> <li>AES</li> </ul> </li> <li>Hybrid Encryption</li> <li>Mini Projects</li> <li>Future Scope</li> <li>Conclusion</li> </ol>"},{"location":"overview/","title":"Project Overview","text":""},{"location":"overview/#introduction","title":"Introduction","text":"<p>This document provides a technical overview of the Secure Chat Application, a real-time messaging platform designed with a primary focus on security and privacy. The application ensures that all communications are confidential and secure through a robust, multi-layered encryption strategy.</p> <p>The project is built using a modern technology stack, with React for the frontend client and Spring Boot for the backend server. Real-time, bidirectional communication is achieved using WebSockets.</p>"},{"location":"overview/#core-technologies","title":"Core Technologies","text":"<ul> <li>Frontend: React</li> <li>Backend: Spring Boot</li> <li>Real-Time Communication: WebSockets</li> <li>Security:<ul> <li>Hybrid Encryption (RSA + AES) for End-to-End Encryption</li> <li>TLS/SSL for Transport Layer Security</li> </ul> </li> </ul>"},{"location":"overview/#key-features","title":"Key Features","text":""},{"location":"overview/#1-end-to-end-encryption-e2ee","title":"1. End-to-End Encryption (E2EE)","text":"<p>The application's core security feature is its implementation of End-to-End Encryption. This ensures that a message is encrypted on the sender's device and can only be decrypted by the intended recipient's device. The server, or any potential eavesdropper, cannot read the message content.</p>"},{"location":"overview/#2-hybrid-encryption-model","title":"2. Hybrid Encryption Model","text":"<p>To achieve robust and efficient E2EE, the application uses a hybrid encryption model that combines the strengths of both asymmetric (RSA) and symmetric (AES) cryptography.</p> <ul> <li>RSA (Asymmetric Encryption): Used to securely exchange symmetric keys between users. Each user has a public/private key pair. The public key is used to encrypt a one-time session key, which can only be decrypted by the recipient's corresponding private key.</li> <li>AES (Symmetric Encryption): Used for the actual encryption of messages. AES is much faster than RSA for encrypting large amounts of data. A new, unique AES session key is generated for each conversation, exchanged securely using RSA, and then used to encrypt all messages within that session.</li> </ul>"},{"location":"overview/#3-transport-layer-security-tls","title":"3. Transport Layer Security (TLS)","text":"<p>In addition to E2EE for message content, all communication between the client and the server is wrapped in a TLS (Transport Layer Security) tunnel. This encrypts the entire data stream, protecting message metadata and preventing man-in-the-middle (MITM) attacks between the client and the server.</p>"},{"location":"overview/#4-real-time-communication","title":"4. Real-Time Communication","text":"<p>The use of WebSockets provides a persistent, full-duplex communication channel between the client and the server. This allows for the instantaneous delivery of messages and presence status updates (e.g., typing indicators) without the overhead of traditional HTTP polling, creating a seamless and responsive user experience.</p>"},{"location":"websockets/","title":"WebSockets in the Secure Chat App","text":"<p>WebSockets are a foundational technology for this project, enabling the real-time, bidirectional communication that is essential for a modern chat application.</p>"},{"location":"websockets/#what-are-websockets","title":"What are WebSockets?","text":"<p>A WebSocket is a communication protocol that provides a full-duplex, persistent connection between a client (like a user's browser) and a server.</p> <p>Think of traditional HTTP as sending letters. The client sends a request (a letter), and the server sends a response (a letter back). The conversation is a series of separate exchanges. A WebSocket, on the other hand, is like a telephone call. The client \"calls\" the server once to open a connection, and that line stays open, allowing both sides to talk freely and instantly until one of them hangs up.</p>"},{"location":"websockets/#why-use-websockets-for-a-chat-application","title":"Why Use WebSockets for a Chat Application?","text":"<p>Using WebSockets is critical for creating a responsive and seamless user experience.</p> <ul> <li>Low Latency: As soon as a message is sent, it's pushed through the open connection to the recipient almost instantly. There's no need for the client to constantly ask the server, \"Are there any new messages?\"</li> <li>Full-Duplex Communication: Data can flow in both directions at the same time. The server can push messages to the client at any moment, which is perfect for receiving new messages, typing indicators, and presence updates (e.g., online status).</li> <li>Efficiency: After the initial connection (the \"handshake\"), the data frames sent back and forth have very little overhead compared to the bulky headers of HTTP requests. This saves bandwidth and improves performance.</li> </ul>"},{"location":"websockets/#securing-websockets-wss","title":"Securing WebSockets (WSS)","text":"<p>Given the application's focus on security, all WebSocket connections are established using the Secure WebSocket protocol (<code>wss://</code>).</p> <p><code>WSS</code> is to <code>WS</code> what <code>HTTPS</code> is to <code>HTTP</code>. It means that the WebSocket connection is layered on top of a Transport Layer Security (TLS) tunnel. The initial handshake is done over HTTPS, and all subsequent WebSocket data is automatically encrypted by the same TLS layer that secures the rest of the application's traffic.</p> <p>This prevents eavesdropping and man-in-the-middle (MITM) attacks on the communication channel between the client and the server. It secures the \"pipe,\" while the End-to-End Encryption (E2EE) secures the message inside the pipe.</p>"},{"location":"websockets/#implementation-in-this-project","title":"Implementation in This Project","text":"<p>In our architecture, the Spring Boot backend exposes a WebSocket endpoint. The React frontend client initiates a connection to this endpoint. Once the secure handshake is complete, this persistent connection is used to:</p> <ol> <li>Send new chat messages from the client to the server.</li> <li>Push incoming messages from the server to the correct recipient client in real time.</li> <li>Transmit real-time events like typing notifications.</li> </ol>"}]}